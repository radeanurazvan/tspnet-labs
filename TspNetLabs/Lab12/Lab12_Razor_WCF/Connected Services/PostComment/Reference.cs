//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PostComment
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostDto", Namespace="http://schemas.datacontract.org/2004/07/Lab6.Wcf.Contracts")]
    public partial class PostDto : object
    {
        
        private PostComment.CommentDto[] CommentsField;
        
        private string DescriptionField;
        
        private string DomainField;
        
        private System.Guid IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostComment.CommentDto[] Comments
        {
            get
            {
                return this.CommentsField;
            }
            set
            {
                this.CommentsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Domain
        {
            get
            {
                return this.DomainField;
            }
            set
            {
                this.DomainField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CommentDto", Namespace="http://schemas.datacontract.org/2004/07/Lab6.Wcf.Contracts")]
    public partial class CommentDto : object
    {
        
        private string TextField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text
        {
            get
            {
                return this.TextField;
            }
            set
            {
                this.TextField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PostComment.IPostCommentService")]
    public interface IPostCommentService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostsService/GetPosts", ReplyAction="http://tempuri.org/IPostsService/GetPostsResponse")]
        System.Threading.Tasks.Task<PostComment.PostDto[]> GetPostsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostsService/AddPost", ReplyAction="http://tempuri.org/IPostsService/AddPostResponse")]
        System.Threading.Tasks.Task AddPostAsync(PostComment.PostDto postDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostsService/UpdatePost", ReplyAction="http://tempuri.org/IPostsService/UpdatePostResponse")]
        System.Threading.Tasks.Task UpdatePostAsync(System.Guid id, PostComment.PostDto postDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPostsService/DeletePost", ReplyAction="http://tempuri.org/IPostsService/DeletePostResponse")]
        System.Threading.Tasks.Task DeletePostAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentsService/AddPostComment", ReplyAction="http://tempuri.org/ICommentsService/AddPostCommentResponse")]
        System.Threading.Tasks.Task AddPostCommentAsync(System.Guid postId, PostComment.CommentDto commentDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentsService/AddCommentComment", ReplyAction="http://tempuri.org/ICommentsService/AddCommentCommentResponse")]
        System.Threading.Tasks.Task AddCommentCommentAsync(System.Guid commentId, PostComment.CommentDto commentDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentsService/DeleteComment", ReplyAction="http://tempuri.org/ICommentsService/DeleteCommentResponse")]
        System.Threading.Tasks.Task DeleteCommentAsync(System.Guid commentId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface IPostCommentServiceChannel : PostComment.IPostCommentService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class PostCommentServiceClient : System.ServiceModel.ClientBase<PostComment.IPostCommentService>, PostComment.IPostCommentService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PostCommentServiceClient() : 
                base(PostCommentServiceClient.GetDefaultBinding(), PostCommentServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IPostCommentService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PostCommentServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(PostCommentServiceClient.GetBindingForEndpoint(endpointConfiguration), PostCommentServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PostCommentServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PostCommentServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PostCommentServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PostCommentServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PostCommentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<PostComment.PostDto[]> GetPostsAsync()
        {
            return base.Channel.GetPostsAsync();
        }
        
        public System.Threading.Tasks.Task AddPostAsync(PostComment.PostDto postDto)
        {
            return base.Channel.AddPostAsync(postDto);
        }
        
        public System.Threading.Tasks.Task UpdatePostAsync(System.Guid id, PostComment.PostDto postDto)
        {
            return base.Channel.UpdatePostAsync(id, postDto);
        }
        
        public System.Threading.Tasks.Task DeletePostAsync(System.Guid id)
        {
            return base.Channel.DeletePostAsync(id);
        }
        
        public System.Threading.Tasks.Task AddPostCommentAsync(System.Guid postId, PostComment.CommentDto commentDto)
        {
            return base.Channel.AddPostCommentAsync(postId, commentDto);
        }
        
        public System.Threading.Tasks.Task AddCommentCommentAsync(System.Guid commentId, PostComment.CommentDto commentDto)
        {
            return base.Channel.AddCommentCommentAsync(commentId, commentDto);
        }
        
        public System.Threading.Tasks.Task DeleteCommentAsync(System.Guid commentId)
        {
            return base.Channel.DeleteCommentAsync(commentId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPostCommentService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPostCommentService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/PC");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return PostCommentServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IPostCommentService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return PostCommentServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IPostCommentService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IPostCommentService,
        }
    }
}
